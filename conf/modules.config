#!/usr/bin/env nextflow

/*
#
#
#  ██████╗ ██╗  ██╗██╗   ██╗██╗      ██████╗ ██████╗ ██╗  ██╗███████╗██████╗ ███████╗
#  ██╔══██╗██║  ██║╚██╗ ██╔╝██║     ██╔═══██╗██╔══██╗██║  ██║██╔════╝██╔══██╗██╔════╝
#  ██████╔╝███████║ ╚████╔╝ ██║     ██║   ██║██████╔╝███████║█████╗  ██████╔╝█████╗  
#  ██╔═══╝ ██╔══██║  ╚██╔╝  ██║     ██║   ██║██╔═══╝ ██╔══██║██╔══╝  ██╔══██╗██╔══╝  
#  ██║     ██║  ██║   ██║   ███████╗╚██████╔╝██║     ██║  ██║███████╗██║  ██║███████╗
#  ╚═╝     ╚═╝  ╚═╝   ╚═╝   ╚══════╝ ╚═════╝ ╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝
#                                                                                    
#                                      
# PHYLOPHERE: A Nextflow pipeline including a complete set
# of phylogenetic comparative tools and analyses for Phenome-Genome studies
#
# Github: https://github.com/nozerorma/caastools/nf-phylophere
#
# Author:         Miguel Ramon (miguel.ramon@upf.edu)
#
# File: modules.config
#
*/

/*
 * Config file for defining DSL2 per module options and publishing paths
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * ext.args   = Additional arguments appended to command in module.
 * ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
 * ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
 * ext.prefix = File name prefix for output files.
 * ----------------------------------------------------------------------------------------
 */

// Extract traitfile name and folder structure for better output legibility
File traitFile = new File(params.traitfile)
String traitFileName = traitFile.getName() // Extracts the file name
String traitFolder1DirUp = traitFile.parentFile.name // Extracts one directory up from the trait file

process {

    // DISCOVERY process: Identifies CAAS patterns in the data
    withName: 'DISCOVERY' {
        
        // Define additional arguments
        ext.args = """--patterns ${params.patterns}
        --max_bg_gaps ${params.maxbggaps}
        --max_fg_gaps ${params.maxfggaps}
        --max_gaps ${params.maxgaps}
        --max_gaps_per_position ${params.maxgapsperposition}
        --max_bg_miss ${params.maxbgmiss}
        --max_fg_miss ${params.maxfgmiss}
        --max_miss ${params.maxmiss}"""
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/discovery" },
            // I want to dinamically change copy/move ifelse discovery is the only process run
	    mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // RESAMPLE process: Resamples the data based on certain criteria
    withName: 'RESAMPLE' {
        
        // Define additional arguments
        ext.args = "--cycles ${params.cycles}"
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/resample" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // BOOTSTRAP: repeat the CAAS discovery on a large number of discovery groups.
    
    withName: 'BOOTSTRAP' {
        
        // Define additional arguments
        ext.args = """--patterns ${params.patterns}
        --max_bg_gaps ${params.maxbggaps}
        --max_fg_gaps ${params.maxfggaps}
        --max_gaps ${params.maxgaps}
        --max_gaps_per_position ${params.maxgapsperposition}
        --max_bg_miss ${params.maxbgmiss}
        --max_fg_miss ${params.maxfgmiss}
        --max_miss ${params.maxmiss}"""
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/bootstrap" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    // RER_TRAIT: build named traitfile
    
    withName: 'RER_TRAIT' {
        
        // Define additional arguments if needed
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/RERConverge/RER_Traits/" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // RER_TREES: build named traitfile
    
    withName: 'RER_TREES' {
        
        // Define additional arguments if needed
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/RERConverge/RER_Objects" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // RER_MATRIX: build named traitfile
    
    withName: 'RER_MATRIX' {
        
        // Define additional arguments if needed
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/RERConverge/RER_Objects" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }   
        
    // RER_CONT: build named traitfile
    
    withName: 'RER_CONT' {
        
        // Define additional arguments
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/RERConverge/RER_Results" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    } 
}
